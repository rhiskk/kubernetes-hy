name: Release application

on:
  push:
    branches:
      - main
    paths:
      - 'todo-app/**'
      - '.github/workflows/main.yaml'

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: dwk-cluster
  GKE_ZONE: europe-north1-a
  BACKEND_IMAGE: todo-backend
  DAILY_IMAGE: todo-daily
  FRONTEND_IMAGE: todo-frontend
  BACKEND_DEP: todo-backend-dep
  FRONTEND_DEP: todo-frontend-dep
  SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Sops Binary Installer
        uses: mdgreenwald/mozilla-sops-action@v1.2.0
        with:
          version: 'latest'
        id: install

      - name: Decrypt secret
        run: |-
          cd ./todo-app/backend/manifests/
          echo $SOPS_AGE_KEY > key.txt
          export SOPS_AGE_KEY_FILE=$(pwd)/key.txt
          sops --decrypt secret.enc.yaml > secret.yaml

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@main
        with:
          project_id: ${{ secrets.GKE_PROJECT }}
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          export_default_credentials: true

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker
      # Get the GKE credentials so we can deploy to the cluster
      - run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
      # Build the Docker image
      - name: Build
        run: |-
          cd ./todo-app/
          docker build \
            --tag "gcr.io/$PROJECT_ID/$BACKEND_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA" \
            ./backend
          docker build \
            --tag "gcr.io/$PROJECT_ID/$DAILY_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA" \
            ./daily
          docker build \
            --tag "gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA" \
            ./frontend

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/$BACKEND_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"
          docker push "gcr.io/$PROJECT_ID/$DAILY_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"
          docker push "gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"

      # Set up kustomize
      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v1

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          cd ./todo-app/
          kubectl config set-context --current --namespace=project
          kustomize edit set namespace project
          kustomize edit set image TODO_BACKEND_IMAGE=gcr.io/$PROJECT_ID/$BACKEND_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA
          kustomize edit set image TODO_DAILY_IMAGE=gcr.io/$PROJECT_ID/$DAILY_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA
          kustomize edit set image TODO_FRONTEND_IMAGE=gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA
          kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$BACKEND_DEP
          kubectl rollout status deployment/$FRONTEND_DEP
          kubectl get services -o wide
